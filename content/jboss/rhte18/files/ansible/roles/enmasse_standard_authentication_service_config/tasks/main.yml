---

# standard-authservice keycloak credentials
- name: give project view rights for the keycloak controller
  shell: "{{ openshift_cli }} adm policy add-role-to-user view system:serviceaccount:{{ ocp_project }}:default -n {{ ocp_project }}"
  ignore_errors: true

- name: check if keycloak-credentials secret exists
  shell: "{{ openshift_cli }} get secret keycloak-credentials -n {{ ocp_project }}"
  register: standard_authservice_keycloak_secret_exists
  ignore_errors: true
  changed_when: false

- name: create secret with keycloak admin credentials
  shell: |
    {{ openshift_cli }} create secret generic keycloak-credentials \
    --from-literal=admin.username={{ standard_authservice_keycloak_admin_username }} \
    --from-literal=admin.password={{ standard_authservice_keycloak_admin_password }} \
    -n {{ ocp_project }}
  when: standard_authservice_keycloak_secret_exists is failed

- name: check if keycloak-config configmap exists
  shell: "{{ openshift_cli }} get configmap keycloak-config -n {{ ocp_project }}"
  register: keycloak_config_configmap_exists
  ignore_errors: true
  changed_when: false

- name: register keycloak host
  shell: "{{ openshift_cli }} get route keycloak -o jsonpath={.spec.host} -n {{ ocp_project }}"
  register: keycloak_route
  changed_when: false
  ignore_errors: true

- name: set keycloak external url
  set_fact:
    keycloak_http_url: "https://{{ keycloak_route.stdout }}/auth"
  when: (keycloak_http_url is not defined) and (not (keycloak_route.stdout | search("127.0.0.1")))

- name: retrieve keycloak service cluster ip
  shell: "{{ openshift_cli }} get service standard-authservice -o jsonpath={.spec.clusterIP} -n {{ ocp_project }}"
  register: authservice_clusterip
  when: (keycloak_http_url is not defined)  

- name: set keycloak internal url
  set_fact:
    keycloak_http_url: "https://{{ authservice_clusterip.stdout }}:8443/auth"
  when: (keycloak_http_url is not defined)

- name: check if OAUTH service account exists
  shell: "{{ openshift_cli }} get sa kc-oauth -n {{ ocp_project }}"
  register: oauth_sa_exists
  ignore_errors: true

- name: create OAUTH service account
  shell: "{{ openshift_cli }} create sa kc-oauth -n {{ ocp_project }}"
  when: oauth_sa_exists is failed

- name: annotate OAUTH service account
  shell: "{{ openshift_cli }} annotate sa kc-oauth serviceaccounts.openshift.io/oauth-redirecturi.first={{ keycloak_http_url }} -n {{ ocp_project }}"
  when: oauth_sa_exists is failed

- name: obtain token for service account kc-oauth
  shell: "{{ openshift_cli }} sa get-token kc-oauth -n {{ ocp_project }}"
  register: token_result

- name: get OpenShift OAuth URL
  shell: "{{ openshift_cli }} get --raw=/.well-known/oauth-authorization-server"
  ignore_errors: True
  register: oauth_result

- name: set identity provider
  when: oauth_result.rc == 0
  set_fact:
    identity_url: "{{ (oauth_result.stdout | from_json).get('issuer') }}"

- name: unset identity provider if using local cluster
  when: identity_url is match("https://127.0.0.1:8443") or identity_url is match("https://localhost:8443")
  set_fact:
    identity_url: null

- name: create keycloak-config configmap
  shell: |
    {{ openshift_cli }} create configmap keycloak-config \
    --from-literal=hostname=standard-authservice.{{ ocp_project }}.svc \
    --from-literal=httpUrl={{ keycloak_http_url }} \
    --from-literal=port=5671 \
    --from-literal=caSecretName=standard-authservice-cert \
    --from-literal=identityProviderClientId=system:serviceaccount:{{ ocp_project }}:kc-oauth \
    --from-literal=identityProviderClientSecret={{ token_result.stdout }} \
    --from-literal=identityProviderUrl={{ identity_url }} \
    -n {{ ocp_project }}
  when: keycloak_config_configmap_exists is failed