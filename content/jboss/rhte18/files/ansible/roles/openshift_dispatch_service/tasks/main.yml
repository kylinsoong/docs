---

# deploy postgresql
- name: check if postgresql is deployed
  shell: "{{ openshift_cli }} get dc {{ postgresql_service_name }} -n {{ ocp_project }}"
  register: postgresql_deployed
  ignore_errors: true
  changed_when: false

- import_tasks: deploy_postgresql.yml
  when: postgresql_deployed is failed

# application configmap
- name: check if {{ application_configmap }} configmap exists
  shell: "{{ openshift_cli }} get configmap {{ application_configmap }} -n {{ ocp_project }}"
  register: configmap_exists
  ignore_errors: true
  changed_when: false

- name: copy configmap files from template
  template: src={{item}} dest={{ playbook_work_dir }}/{{ item }}
  with_items:
    - application.properties
    - jbpm-quartz.properties
  when: configmap_exists is failed

- name: create {{ application_configmap }} configmap
  shell: |
     {{ openshift_cli }} create configmap {{ application_configmap }} \
     --from-file={{ playbook_work_dir }}/application.properties \
     --from-file={{ playbook_work_dir }}/jbpm-quartz.properties \
     -n {{ ocp_project }}
  when: configmap_exists is failed 

# EnMasse truststore
- name: check if {{ enmasse_truststore_secret }} secret exists
  shell: "{{ openshift_cli }} get secret {{ enmasse_truststore_secret }} -n {{ ocp_project }}"
  register: enmasse_truststore_secret_exists
  ignore_errors: true
  changed_when: false

- include_role:
    name: openshift_create_truststore_secret
  vars:
    certs_secret: external-certs-messaging
    certs_project: "{{ project_enmasse }}"
    truststore: "{{ enmasse_truststore }}"
    truststore_secret: "{{ enmasse_truststore_secret }}"    
  when: >
    ((install_enmasse_truststore_secret is defined and install_enmasse_truststore_secret|bool == true)) and
    (enmasse_truststore_secret_exists is failed)

- include_tasks: deploy_openshift_artifacts.yml