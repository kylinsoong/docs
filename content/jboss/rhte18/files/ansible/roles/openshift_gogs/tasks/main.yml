---

# deploy gogs
- name: check if gogs is deployed
  shell: "{{ openshift_cli }} get dc {{ gogs_application }} -n {{ ocp_project }}"
  register: gogs_deployed
  ignore_errors: true
  changed_when: false

- name: deploy gogs
  shell: |
    {{ openshift_cli }} process -f {{ gogs_template }} \
    --param=APPLICATION_NAME={{ gogs_application }} \
    --param=HOSTNAME={{ gogs_application }}-{{ ocp_project }}.{{ ocp_domain }} \ 
    --param=GOGS_VERSION={{ gogs_version }} \
    --param=DATABASE_USER={{ gogs_database_user }} \
    --param=DATABASE_PASSWORD={{ gogs_database_password }} \ 
    --param=DATABASE_NAME={{ gogs_database_name }} \
    --param=SKIP_TLS_VERIFY={{ gogs_skip_tls_verify }} | \ 
    {{ openshift_cli }} create -f - -n {{ ocp_project}}
  when: gogs_deployed is failed

- name: wait for postgresql to be running
  shell: "{{ openshift_cli }} get dc {{ gogs_application }}-postgresql -o template --template={{ json_template }} -n {{ ocp_project }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 30
  delay: 10
  changed_when: false

- name: resume gogs deployment
  shell: "{{ openshift_cli }} rollout resume dc/{{ gogs_application }} -n {{ ocp_project }}"
  ignore_errors: true

- name: wait for gogs to be running
  shell: "{{ openshift_cli }} get dc {{ gogs_application }} -o template --template={{ json_template }} -n {{ ocp_project }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 30
  delay: 10
  changed_when: false 

- name: get gogs route url
  shell: echo $({{ openshift_cli }} get route {{ gogs_application }} -o jsonpath='{.spec.host}' -n {{ ocp_project }})
  register: gogs_url

- name: check if gogs admin user exists
  uri:
    url: http://{{ gogs_url.stdout }}/api/v1/users/{{ gogs_admin_user }}
    status_code: 200
  register: result
  ignore_errors: true
  changed_when: false

- name: create gogs admin user
  shell: |
    echo $(curl -o /dev/null -sL --post302 -w "%{http_code}" \
    http://{{ gogs_url.stdout }}/user/sign_up \
    --form user_name={{ gogs_admin_user }} \
    --form password={{ gogs_admin_password }} \
    --form retype={{ gogs_admin_password }} \
    --form email={{ gogs_admin_email }})
  register: result
  until: result.stdout == "200"
  retries: 5
  delay: 2
  when: >
    (create_gogs_users is defined and create_gogs_users|bool == true) and
    (result is failed)

- name: check if gogs organisation exists
  uri:
    url: http://{{ gogs_url.stdout }}/api/v1/orgs/{{ gogs_organization }}
    status_code: 200
  register: result
  ignore_errors: true
  changed_when: false

- name: create {{ gogs_organization }} gogs organization
  uri:
    url: http://{{ gogs_url.stdout }}/api/v1/admin/users/{{ gogs_admin_user }}/orgs
    method: POST
    force_basic_auth: yes
    user: "{{ gogs_admin_user }}"
    password: "{{ gogs_admin_password }}"
    body: >
      {"username":"{{ gogs_organization }}"}
    body_format: json
    status_code: 201
  when: >
    (create_gogs_users is defined and create_gogs_users|bool == true) and
    (result is failed)

- name: check if gogs {{ gogs_developer_user }} user exists
  uri:
    url: http://{{ gogs_url.stdout }}/api/v1/users/{{ gogs_developer_user }}
    status_code: 200
  register: result
  ignore_errors: true
  changed_when: false

- name: create gogs {{ gogs_developer_user }} user
  uri:
    url: http://{{ gogs_url.stdout }}/api/v1/admin/users
    method: POST
    force_basic_auth: yes
    user: "{{ gogs_admin_user }}"
    password: "{{ gogs_admin_password }}"
    body_format: json
    body: >
      {"login_name": "{{ gogs_developer_user }} ","username": "{{ gogs_developer_user }}","email":"{{ gogs_developer_email }}","password": "{{ gogs_developer_password }}"}
    status_code: 201
  when: >
    (create_gogs_users is defined and create_gogs_users|bool == true) and
    (result is failed)

- name: get {{ gogs_organization }} teams
  uri:
    url: http://{{ gogs_url.stdout }}/api/v1/orgs/{{ gogs_organization }}/teams
    method: GET
  register: gogs_organization_team
  when: >
    (create_gogs_users is defined and create_gogs_users|bool == true)
  ignore_errors: true
  changed_when: false

- name: filter out owners team
  set_fact:
    gogs_organization_team_owners_id: "{{ gogs_organization_team.json|json_query(gogs_organization_team_owners_query) }}"
  when: >
    (create_gogs_users is defined and create_gogs_users|bool == true)
  vars:
    gogs_organization_team_owners_query: "[?name=='Owners'] | [0].id"
  ignore_errors: true
  changed_when: false

- name: remove {{ gogs_developer_user }} user from the owners team of the {{ gogs_organization }} organization
  uri:
    url: http://{{ gogs_url.stdout }}/api/v1/admin/teams/{{ gogs_organization_team_owners_id }}/members/{{ gogs_developer_user }}
    method: DELETE
    force_basic_auth: yes
    user: "{{ gogs_admin_user }}"
    password: "{{ gogs_admin_password }}"
    status_code: 204
  when: >
    (create_gogs_users is defined and create_gogs_users|bool == true)
  ignore_errors: true

- name: add {{ gogs_developer_user }} user to the owners team of the {{ gogs_organization }} organization
  uri:
    url: http://{{ gogs_url.stdout }}/api/v1/admin/teams/{{ gogs_organization_team_owners_id }}/members/{{ gogs_developer_user }}
    method: PUT
    force_basic_auth: yes
    user: "{{ gogs_admin_user }}"
    password: "{{ gogs_admin_password }}"
    status_code: 204
  when: >
    (create_gogs_users is defined and create_gogs_users|bool == true)
